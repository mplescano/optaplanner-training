/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.workerrostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.training.workerrostering.domain.Employee;
import org.optaplanner.training.workerrostering.domain.Roster;
import org.optaplanner.training.workerrostering.domain.RosterParametrization;
import org.optaplanner.training.workerrostering.domain.ShiftAssignment;
import org.optaplanner.training.workerrostering.domain.Skill;
import org.optaplanner.training.workerrostering.domain.Spot;
import org.optaplanner.training.workerrostering.domain.TimeSlot;

import java.time.temporal.ChronoUnit;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Required skill for a shift"
    when
        ShiftAssignment(
                employee != null,
                !getEmployee().getSkillSet().contains(getSpot().getRequiredSkill()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Unavailable time slots for an employee"
    when
        ShiftAssignment(
                employee != null,
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -50);
end

rule "At most one shift assignment per day per employee"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftDay : getTimeSlot().getStartDateTime().toLocalDate())
        ShiftAssignment(
                employee == $e,
                getTimeSlot().getStartDateTime().toLocalDate() == $leftDay,
                this != $s)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "No 2 shifts within 10 hours from each other"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime())
        ShiftAssignment(
                employee == $e,
                $leftEndDateTime <= getTimeSlot().getEndDateTime(),
                $leftEndDateTime.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) <10,
                this != $s)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// TODO Pseudo weekends: Get a 48 hours rest every 9 days (so work at most 7 days before each 2-day weekend)

// ############################################################################
// Soft constraints
// ############################################################################

rule "Fairness: all employees should work about the same number of shifts"
    when
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(employee == $e);
            $total : count($a)
        )
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        // Negative to balance it across employees
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total.intValue() * $total.intValue()));
end

rule "Affinity: assign an employee to the same spot as much as possible"
    when
        $s : Spot()
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(spot == $s, employee == $e);
            $total : count($a)
        )
        // Optionally add something like this for historic ShiftAssignments not in the working memory:
        // EmployeeSpotHistorySummary(spot == $s, employee == $e)
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        // Positive to anti-balance it across spot-employee pairs
        scoreHolder.addSoftConstraintMatch(kcontext, ($total.intValue() * $total.intValue()));
end
